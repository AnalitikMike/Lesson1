Hедавно в моем окружении опять материализовался спор, что круче, mercurial или git. Я имел удовольствие плотно поиспользовать оба продукта и хочу изложить свое видение вопроса. Букв получилось много, поэтому это будет серия из нескольких постов.

Disclaimer

Последние полгода время я практически постоянно пользовался git. До этого большую часть занимал mercurial, и уже вторую неделю акцент основательно сместился в сторону последнего. Если вдруг покажется, что по моим выводам git получается лучше, чем hg, то это или правда, или я еще не вспомнил всей крутости меркуриала.
GUI

Для многих этот параметр может стать решающим при выборе системы контроля версий. Из-за отличного во всех отношениях TortoiseHg Mercurial попадает в лидеры. Но на самом деле есть крутые инструменты и для git. Я в свое время активно пользовался gitextensions и до сих пор считаю его лучшим для git. С высоты птичьего полета функциональность обоих продуктов одинакова (визуальное отображение коммитов/изменений/ревизий, интергация с проводником/студией, возможность выполнения базовых операций с помощью манипулятора типа "мышь"/тачпада). Есть еще github for windows, который работает не только с github, но и с обычными репозиториями, и предлагает модный интерфейс с урезаным функционалом (которого может хватить для 99% сценариев неискушенного пользователя). Ну и по умолчанию в стандартную поставку git входит такой себе gitk, который звезд с неба не хватает, и вполне сносно показывает историю.

Консоль

Про свое отношение к консоли я уже писал раньше. Оба инструмента для меня отлично работают в связке с powershell (с помощью posh-hg и posh-git соответственно). Правда, стоит отметить, что после git mercurial кажется несколько простецким. Как-то маловато опций и команд. С другой стороны в git их многовато. Но после некоторого времени начальный дискомфорт пропадает, хотя интерфейс git мне все же больше по душе. 

Документация

Git ставится с web версией документации и при любом вопросе радостно открывает ее в браузере. Запрос по команде гита в гугле показывает ссылку на документацию в первой странице. Сама по себе документация весьма обильна и не всегда понятна (мне). 

Меркуриал стыдливо показывает help в консоли, при этом не особо заморачиваясь тем, что она не влезет на экран (плагином pager это наверное можно полечить -- я не пробовал). От гугла свои доки они почему-то прячут. 

Вообще сложилось впечатление, что помощь по git в интернетах получить проще.

История коммитов

По умолчанию оба инструмента показывают историю в слегка безумном виде: много букв и мало смысла, и оба же легко поддаются дрессировке с помощью алиасов (их можно без труда нагуглить, выглядят они примерно так). В результате мы получаем аккуратненькие цветные логи с ASCII веточками. В git сразу встроен линуксовый pager а hg валит всю историю скопом. Но и туда можно прикрутить пейджер с помощью плагина pager (даже тот же линуксовый). Стоит также отметить, что на винде могут быть проблемы с отображением цветов в меркуриале, и это тоже исправляется с помощью другого плагина, color. Вообще hg со старта пустой как бубен, и все полезности подклчаются через плагины. Последние входят в инсталяцию меркуриала и для включения требуют лишь строчки в конфиге (или галочки в UI).

Но вернемся к истории. Несмотря на то, что количество переключателей в git версии команды log превышает показатели для коллеги из меркуриала в разы, то, что мне нужно, одинаково умеют показывать оба инструмента. Опять, таки, чисто субъективно у git эти команды более логичны.

Ревизии

Для работы с ревизиями (указание нужных ревизий, диапазонов и т.д.) оба кандидата представляют свой уникальный набор фич. git позволяет задавать ревизии не полностью, а по первым символам хеша, как только они уникальны. hg раньше этого вроде бы не умел, а сейчас вот научился, плюс он ведет двойную нумерацию ревизий — паралельно с хешами нумерует их по порядку, что в ряде случаев еще больше облегчает работу. Правда, здесь возможны казусы — сквозная нумерация может меняться при синхронизации с сервером, поэтому запоминать любимые коммиты лучше все же по хешу.

Также git предоставляет миллион способов задать нужные ревизии, и hg, в свою очередь, представляет свои заклинания. Мне так и не довелось использовать все из них, но я рад, что они есть.

Заключение

На этом буду заканчивать первую часть сравнения. Пока получается паритет. В следующей части обсудим места, где две системы радикальнее разошлись в понимании "что такое хорошо".